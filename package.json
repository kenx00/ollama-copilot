{
  "name": "ollama-dev-companion",
  "displayName": "Ollama Dev Companion",
  "description": "AI Chat and Inline Code Suggestions powered by Ollama Local LLMs",
  "version": "0.2.2",
  "publisher": "Gnana997",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/gnana997/ollama-copilot.git"
  },
  "engines": {
    "vscode": "^1.105.0"
  },
  "categories": [
    "Programming Languages",
    "Machine Learning",
    "AI",
    "Snippets",
    "Chat"
  ],
  "keywords": [
    "ai",
    "copilot",
    "code completion",
    "ollama",
    "llm",
    "local ai",
    "chat",
    "code assistant",
    "autocomplete",
    "pair programming"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "icon": "media/png/ollama-dev-comp.png",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ollama-chat",
          "title": "Ollama Chat",
          "icon": "$(symbol-misc)"
        }
      ]
    },
    "views": {
      "ollama-chat": [
        {
          "id": "ollamaChatView",
          "name": "Chat",
          "type": "webview",
          "icon": "$(comment)"
        }
      ]
    },
    "configuration": {
      "title": "Ollama Copilot",
      "properties": {
        "ollama.defaultModel": {
          "type": "string",
          "description": "Default model to use with Ollama Copilot"
        },
        "ollama.apiHost": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "Ollama API host URL (e.g., http://localhost:11434)"
        },
        "ollama.enableInlineCompletion": {
          "type": "boolean",
          "default": true,
          "description": "Enable inline code completion suggestions"
        },
        "ollama.maxMessageHistory": {
          "type": "number",
          "default": 100,
          "description": "Maximum number of messages to keep in chat history"
        },
        "ollama.maxMessageLength": {
          "type": "number",
          "default": 10000,
          "description": "Maximum length of a single message before truncation"
        },
        "ollama.completionCacheSize": {
          "type": "number",
          "default": 100,
          "description": "Number of completions to cache"
        },
        "ollama.completion.maxTokens": {
          "type": "number",
          "default": 150,
          "description": "Maximum number of tokens to generate for completions"
        },
        "ollama.completion.temperature": {
          "type": "number",
          "default": 0.7,
          "description": "Temperature for completion generation (0.0 - 2.0)"
        },
        "ollama.completion.contextWindow": {
          "type": "number",
          "default": 2048,
          "description": "Context window size for completions"
        },
        "ollama.memory.enableMonitoring": {
          "type": "boolean",
          "default": false,
          "description": "Enable memory usage monitoring"
        },
        "ollama.memory.monitoringInterval": {
          "type": "number",
          "default": 30000,
          "description": "Memory monitoring interval in milliseconds"
        },
        "ollama.memory.warningThresholdMB": {
          "type": "number",
          "default": 200,
          "description": "Memory usage warning threshold in MB"
        },
        "ollama.memory.criticalThresholdMB": {
          "type": "number",
          "default": 400,
          "description": "Memory usage critical threshold in MB"
        }
      }
    },
    "commands": [
      {
        "command": "ollama-copilot.searchavailablemodels",
        "title": "Search Available Models"
      },
      {
        "command": "ollama-copilot.selectDefaultModel",
        "title": "Select Default Model"
      },
      {
        "command": "ollama-copilot.clearCompletionCache",
        "title": "Clear Completion Cache"
      },
      {
        "command": "ollama-copilot.openChatPanel",
        "title": "Open Ollama Chat Panel"
      },
      {
        "command": "ollama-copilot.updateOllamaHost",
        "title": "Update Ollama Host"
      },
      {
        "command": "ollama-copilot.showMemoryStats",
        "title": "Ollama Copilot: Show Memory Stats"
      },
      {
        "command": "ollama-copilot.forceGarbageCollection",
        "title": "Ollama Copilot: Force Garbage Collection"
      },
      {
        "command": "ollama-copilot.showResourceStatus",
        "title": "Ollama Copilot: Show Resource Status"
      },
      {
        "command": "ollama-copilot.showFileOperations",
        "title": "Ollama Copilot: Show Active File Operations"
      },
      {
        "command": "ollama-copilot.showPerformanceReport",
        "title": "Ollama Copilot: Show File Operation Performance Report"
      },
      {
        "command": "ollama-copilot.exportPerformanceMetrics",
        "title": "Ollama Copilot: Export Performance Metrics"
      },
      {
        "command": "ollama-copilot.validateConfiguration",
        "title": "Ollama Copilot: Validate Configuration"
      },
      {
        "command": "ollama-copilot.showValidationStats",
        "title": "Ollama Copilot: Show Validation Statistics"
      },
      {
        "command": "ollama-copilot.showRateLimitStatus",
        "title": "Ollama Copilot: Show Rate Limit Status"
      },
      {
        "command": "ollama-copilot.resetRateLimits",
        "title": "Ollama Copilot: Reset Rate Limits"
      },
      {
        "command": "ollama-copilot.refreshModels",
        "title": "Ollama Copilot: Refresh Models"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run build",
    "compile": "webpack --mode development",
    "watch": "tsc -watch -p ./",
    "dev": "webpack --mode development --watch",
    "build": "webpack --mode production",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "docs": "typedoc",
    "docs:watch": "typedoc --watch",
    "docs:markdown": "typedoc --plugin typedoc-plugin-markdown --out docs/api-markdown",
    "docs:serve": "npx http-server ./docs/api -p 8080",
    "docs:validate": "tsdoc",
    "docs:clean": "rimraf docs/api docs/api-markdown",
    "lint:fix": "eslint src --fix"
  },
  "devDependencies": {
    "@microsoft/tsdoc": "^0.15.1",
    "@microsoft/tsdoc-config": "^0.17.1",
    "@types/mocha": "^10.0.10",
    "@types/node": "24.x",
    "@types/vscode": "^1.105.0",
    "@typescript-eslint/eslint-plugin": "^8.46.0",
    "@typescript-eslint/parser": "^8.46.0",
    "@vscode/test-cli": "^0.0.12",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.37.0",
    "rimraf": "^6.0.1",
    "terser-webpack-plugin": "^5.3.14",
    "ts-loader": "^9.5.4",
    "typedoc": "^0.28.13",
    "typedoc-plugin-markdown": "^4.9.0",
    "typedoc-plugin-merge-modules": "^7.0.0",
    "typescript": "^5.9.3",
    "webpack": "^5.102.1",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "ollama": "^0.6.0"
  }
}
